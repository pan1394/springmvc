<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
        xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"  
        xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd    
                http://www.springframework.org/schema/context    
                 http://www.springframework.org/schema/context/spring-context-3.2.xsd    
                http://www.springframework.org/schema/tx     
                http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">  
  
        <!-- 加载配置JDBC文件 -->  
        <!-- <context:property-placeholder location="classpath:db.properties" />   -->
        <!-- 数据源 -->  
        <!-- <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">  
                <property name="driverClassName">  
                        <value>${db.driverClassName}</value>  
                </property>  
                <property name="url">  
                        <value>jdbc:derby:${db.path};create=true</value>  
                </property>  
                <property name="username">  
                        <value>${db.username}</value>  
                </property>  
                <property name="password">  
                        <value>${db.password}</value>  
                </property>  
        </bean>   -->
  
        <!-- 开启注解配置 即Autowried -->  
        <!-- <context:annotation-config/> -->  
        <!--其实component-scan 就有了annotation-config的功能即把需要的类注册到了spring容器中 -->  
        <!-- <context:component-scan base-package="com.website.service" />   -->
          
        <!-- 在使用mybatis时 spring使用sqlsessionFactoryBean 来管理mybatis的sqlsessionFactory -->  
        <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
                <property name="dataSource" ref="dataSource" />  
                <!-- mybatis配置文件路径 -->  
                <property name="configLocation" value="/WEB-INF/mybatis-config.xml" />  
                <!-- 实体类映射文件路径,这里只有一个就写死了，多个可以使用mybatis/*.xml来替代 -->  
                <property name="mapperLocations" value="classpath:mybatis/studentMapper.xml" />  
        </bean>  
  
        <!-- <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate"> <constructor-arg index="0"> <ref bean="sqlSessionFactory"/>   
                </constructor-arg> </bean> -->  
  
        <!--动态代理实现 不用写dao的实现 -->  
        <bean id="MapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
                <!-- 这里的basePackage 指定了dao层接口路劲，这里的dao接口不用自己实现 -->  
                <property name="basePackage" value="com.yilin.www.spring.dao" />  
                <!-- 如果只有一个数据源的话可以不用指定，但是如果有多个数据源的话必须要指定 -->  
                <!-- <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" /> -->  
                <!--直接指定了sqlsessionTemplate名称，这个和上面的其实是一样的 -->  
                <!-- <property name="sqlSessionTemplateBeanName" value="sqlSession" /> -->  
        </bean>  
  
        <!--事务管理器 -->  
        <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
                <property name="dataSource" ref="dataSource" />  
        </bean>  
        <!-- 使用全注释事务 -->  
        <tx:annotation-driven transaction-manager="transactionManager" />  
</beans> 