<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
						http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
						http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
						http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
						http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.2.xsd"
	default-lazy-init="true">

    <description>The application context configuration for Data Base.</description>
 	<!--  
	<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean" scope="singleton" lazy-init="true">
		<property name="jndiName">
			<value>CCTRLDS_ORAAS</value>
		</property>
	</bean>  
	-->
	
	<!-- for local-->   
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource"> 
		<property name="driverClassName" value="${db_driver}" />
		<property name="url" value="jdbc:derby:${db_path};create=true" />
		<property name="username" value="root" />
		<property name="password" value="root" />
	</bean> 
	
	 <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="packagesToScan" value="com.yilin.www.spring.vo" />
        <property name="hibernateProperties">
            <props>
              <!--   <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop> --> <!--hibernate根据实体自动生成数据库表-->
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>   <!--指定数据库方言-->
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>     <!--在控制台显示执行的数据库操作语句-->
                <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>     <!--在控制台显示执行的数据哭操作语句（格式）-->
                <prop key="hibernate.cache.use_query_cache">true</prop> 
                <prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop> 
  				<!-- <prop key="hibernate.cache.provider_class">net.sf.ehcache.hibernate.EhCacheProvider</prop> -->
  				<prop key="hibernate.cache.use_second_level_cache">true</prop>
  				<prop key="hibernate.generate_statistics">true</prop>  
            </props>
        </property>
    </bean>
    
    <bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>
    
    <tx:annotation-driven transaction-manager="transactionManager" /> 
      	
	<!-- <bean id="nativeJdbcExtractor" class="org.springframework.jdbc.support.nativejdbc.WebSphereNativeJdbcExtractor" />  -->
	
	<bean id="simpleJdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<constructor-arg><ref bean="dataSource"/></constructor-arg>
		<!-- <property name="nativeJdbcExtractor">
            <ref local="nativeJdbcExtractor" />
        </property> -->
		<property name="fetchSize" value="10000"/>
	</bean>
	 
	<!-- org.springframework.jdbc.core.simple.SimpleJdbcTemplate -->
	<bean id="namedJdbcTemplate" class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
		<constructor-arg><ref bean="simpleJdbcTemplate"/></constructor-arg>
	</bean> 
</beans>